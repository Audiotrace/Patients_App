"""This Module contains the RandomPatient class."""

import random
from patient import Patient


greek_addresses = [
    "Αγίας Λαύρας 23, Αθήνα",
    "Λεωφόρος Αλεξάνδρας 72, Αθήνα",
    "Λεωφόρος Κηφισίας 124, Αθήνα",
    "Πανεπιστημίου 30, Αθήνα",
    "Αγίου Ιωάννου 28, Θεσσαλονίκη",
    "Βασιλέως Ηρακλείου 3, Θεσσαλονίκη",
    "Λαγκαδά 15, Θεσσαλονίκη",
    "Εγνατίας 16, Θεσσαλονίκη",
    "Ερμού 45, Πάτρα",
    "Πλατεία Γεωργίου Α', Πάτρα"
]

session_types = ["Διαδικτυακά", "Δια ζώσης", "Τηλεφωνικά"]

ages = list(range(16, 65))


referenced_by = ['Ελευθερία Παππά', 'doctoranytime', 'Βαγγέλης Τσαγκαράκης', 'Πέτρος Πλατής', 'Ιωάννα Κοντογιάννη',
                 'Λενιώ Πασπαρδάνη', 'Πέτρος Ηλιόπουλος', 'Σωτήρης Μαλλίδης', 'Δημήτρης Τζανακάκης',
                 'Βαγγέλης Κοντογιάννης', 'Αγαθή Παντελίδου', 'Ειρήνη Παπαδόπουλου', 'Ρένα Πασπαρδάνη',
                 'Βαγγέλης Παπαστεργίου', 'Ευάγγελος Βλάχος', 'Θανάσης Τριανταφύλλου', 'Δημήτρης Αποστολίδης',
                 'Ελπίδα Πρωτόπαπα', 'Εμμανουήλ Δρίτσας', 'Εμμανουήλ Μπαξεβάνος', 'Νεφέλη Θεοδωρίδου',
                 'Σωτήρης Δημητρόπουλος', 'Άννα Παπανδρέου', 'Βασιλική Λυκουρέζου', 'Μαρία Αλεξανδρή',
                 'Εμμανουήλ Κοντογιάννης', 'Άννα Παπανδρέου', 'Αναστασία Αντωνιάδου', 'Ευμένης Ανδρούτσου',
                 'Αγαθή Δραγώνα', 'Ευάγγελος Ταμβάκης', 'Σοφία Καραμανλή', 'Παναγιώτης Τσαγκαράκης',
                 'Ζωή Παπαδόπουλου', 'Κωνσταντίνος Κοντογιάννης', 'Αργυρώ Πρωτόπαπα', 'Ιωάννης Ζουρνατζής',
                 'Ζωή Ανδρεάδου', 'Θανάσης Μαυρίδης', 'doctoranytime', 'Λενιώ Πρωτόπαπα', 'Βαγγέλης Μπόγρης',
                 'Θανάσης Οικονομίδης', 'Κωνσταντίνος Τζιμούρης', 'Βασίλης Λυκουρέζος', 'Παναγιώτης Τσακίρης',
                 'Πέτρος Παπαναστασίου', 'doctoranytime', 'Βασίλης Νικολούζος', 'Ειρήνη Δραγώνα', 'Βασίλης Κοτσώνης',
                 'Μελίνα Παπανικολάου', 'Μαρίνα Κατσούλη', 'Γιάννης Σωτηρόπουλος', 'Μαρίνα Καραγιάννη',
                 'Γιάννης Παπαγεωργίου', 'Πέτρος Μαυρίδης', 'Μαρία Γρηγορίου', 'Ευαγγελία Κοντογιάννη',
                 'Ιωάννης Δημητρόπουλος', 'Σοφία Δραγώνα', 'Ανδρέας Μακρής', 'Αντώνης Παπαγεωργίου',
                 'Σοφία Παπαδόπουλου', 'Βαγγέλης Στυλιανού', 'Παναγιώτης Ζουρνατζής', 'Ειρήνη Δημητρίου',
                 'Ευάγγελος Λιάγκας', 'Κατερίνα Γεωργοπούλου', 'Νεφέλη Παπανικολάου', 'Ευάγγελος Ευαγγέλου',
                 'Μαρία Πρωτόπαπα', 'Σωτήρης Ραπτόπουλος', 'doctoranytime', 'Ελένη Δραγώνα', 'Άννα Κοντογιάννη',
                 'Ουρανία Παπασταύρου', 'Ανδρέας Τσιακίρης', 'Αντώνης Ελευθεριάδης',
                 'Πέτρος Καλογερόπουλος', 'Θανάσης Πετρίδης', 'Μαρία Διαμαντοπούλου', 'Μαρία Λιάγκα',
                 'Ελένη Γεωργοπούλου', 'Ιωάννα Καραμανλή', 'Σωτήρης Ρίζος', 'Κωνσταντίνος Παναγόπουλος', 'doctoranytime',
                 'Μελίνα Λιάγκα', 'Παναγιώτα Αλεξανδρή', 'Γιάννης Ευαγγελάτος', 'Ελένη Αντωνιάδου',
                 'Τάσος Λυκουρέζος', 'Ευάγγελος Καλογερόπουλος', 'doctoranytime', 'Σωτήρης Μαλλίδης',
                 'Αγαθή Παπαδόπουλου', 'Βαγγέλης Τζαβέλλας', 'Ευάγγελος Οικονομόπουλος',
                 'Σταύρος Παρασκευάς', 'doctoranytime', 'Δημήτρης Βλάχος', 'Φαίη Παπαδόπουλου', 'Φωτεινή Λυκουρέζου',
                 'Πέτρος Νικολούζος', 'doctoranytime', 'Βασίλης Αντωνίου']

professions = ['Εικαστικός', 'Καπετάνιος', 'Οδηγός Νεκροφόρας', 'Εκτροφέας Κουνουπιών', 'Εκτοξευτής Σαϊτών', 'Πλασιέ',
               'Διακοσμητής Σκυλόσπιτων', 'Συγγραφέας', 'Βοθρατζής', 'Νεκροθάφτης', 'Μηχανικός', 'Μουσικός', 'Δικηγόρος',
               'Δημοσιογράφος', 'Φαρμακοποιός', 'Ιατρός', 'Οδοντίατρος', 'Ψυχολόγος', 'Δασολόγος', 'Φυσικοθεραπευτής',
               'Βιολόγος', 'Γεωλόγος', 'Χημικός', 'Κτηνίατρος', 'Αρχιτέκτονας', 'Καθηγητής', 'Γεωπόνος', 'Μαθηματικός',
               'Διευθυντής', 'Οικονομολόγος', 'Διευθυντής Πωλήσεων', 'Κινηματογραφιστής', 'Γυμναστής', 'Σεφ', 'Προπονητής',
               'Φυσικοθεραπευτής Παπαγάλων', 'Φωτογράφος', 'Υδραυλικός', 'Σαλεπιτζής', 'Στριπτιτζού', 'Υποδηματοποιός',
               'Προπονητής Hamster', 'Ηλεκτρολόγος', 'Διευθυντής Ανθρώπινου Δυναμικού', 'Διευθυντής Παραγωγής', 'Σχεδιαστής',
               'Διευθυντής Προμηθειών', 'Διευθυντής Οικονομικών', 'Διευθυντής Πωλήσεων Λιανικής', 'Διευθυντής Πωλήσεων Χονδρικής',
               'Σύμβουλος Επιχειρήσεων', 'Σύμβουλος Οικονομικών']
telephone_numbers = list(range(6979000000, 6979999999))
marital_statuses = ['Άγαμος/η', 'Σε Μόνιμη Σχέση',
                    'Έγγαμος/η', 'Διαζευγμένος/η', 'Χήρος/α']
children = ["", "12,16", "", "2", "8", "25", "5,8,10"]
medical_diagnoses = [
    "Major depressive disorder",
    "Generalized anxiety disorder",
    "Panic disorder",
    "Obsessive-compulsive disorder (OCD)",
    "Post-traumatic stress disorder (PTSD)",
    "Bipolar disorder",
    "Schizophrenia",
    "Borderline personality disorder",
    "Attention deficit hyperactivity disorder (ADHD)",
    "Autism spectrum disorder (ASD)",
    "Eating disorders (anorexia, bulimia, binge eating disorder)",
    "Substance use disorder (alcohol, opioids, cocaine, etc.)"
]
medical_prescriptions = [
    "Acetaminophen (Tylenol)",
    "Ibuprofen (Advil, Motrin)",
    "Aspirin",
    "Lisinopril (Prinivil, Zestril)",
    "Atorvastatin (Lipitor)",
    "Levothyroxine (Synthroid, Levoxyl)",
    "Metformin (Glucophage)",
    "Omeprazole (Prilosec)",
    "Simvastatin (Zocor)",
    "Albuterol (Proventil, Ventolin)",
    "Amoxicillin (Amoxil)",
    "Azithromycin (Zithromax)",
    "Ciprofloxacin (Cipro)",
    "Clonazepam (Klonopin)",
    "Fluoxetine (Prozac)",
    "Lorazepam (Ativan)",
    "Sertraline (Zoloft)",
    "Trazodone (Desyrel)",
    "Venlafaxine (Effexor)"
]
start_dates = ["1/4/2021", "1/5/2021", "1/6/2021", "1/7/2021", "1/8/2021", "1/9/2021",
               "1/10/2021", "1/11/2021", "1/12/2021", "1/1/2022", "1/2/2022", "1/3/2022"]


requests = [
    "Explain my diagnosis and treatment options to me",
    "Provide me with more information about my condition",
    "Help me manage my pain",
    "Refer me to a specialist",
    "Answer my questions and address my concerns",
    "Help me understand the side effects and risks of my medications",
    "Provide me with recommendations for lifestyle changes that can improve my health",
    "Help me navigate the healthcare system",
    "Coordinate my care with other healthcare providers",
    "Be respectful and empathetic towards me",
    "Provide me with accessible and affordable healthcare",
    "Respect my cultural beliefs and preferences"
]

prices = ["20", "25", "30", "35", "40", "45", "50"]


class RandomPatient(Patient):
    """Κλάση που δημιουργεί τυχαία ασθενείς"""

    def __init__(self, gender=None):
        if gender is None:
            gender = random.choice(["male", "female"])
        self.name = f"{self.generate_name(gender)} {self.generate_surname(gender)}"

        super().__init__(name=self.name,
                         session_type=random.choice(session_types),
                         start_date=random.choice(start_dates),
                         referenced_by=random.choice(referenced_by),
                         age=str(random.choice(ages)),
                         telephone=random.choice(telephone_numbers),
                         emergency_phone=random.choice(telephone_numbers),
                         address=random.choice(greek_addresses),
                         profession=random.choice(professions),
                         marital_status=random.choice(marital_statuses),
                         children=random.choice(children),
                         medical_diagnosis=random.choice(medical_diagnoses),
                         medical_prescription=random.choice(
                             medical_prescriptions),
                         request=random.choice(requests),
                         price=random.choice(prices),
                         attached_files="",
                         folder_name="",
                         active=True)

    def generate_name(self, gender):
        """Generates a random name given the gender"""

        greek_female_names = ["Αγαθή", "Αθηνά", "Άννα", "Αναστασία", "Αργυρώ", "Βασιλική", "Ελένη", "Ειρήνη", "Ελευθερία",
                              "Ελπίδα", "Ευαγγελία", "Ευθαλία", "Μαγδάλω", "Ζωή", "Ιωάννα", "Κατερίνα", "Λενιώ", "Μαρία",
                              "Μαρίνα", "Μελίνα", "Νάνσυ", "Νεφέλη", "Ουρανία", "Παναγιώτα", "Ρένα", "Σοφία", "Φαίη", "Φωτεινή"]
        greek_male_names = ["Ανδρέας", "Αντώνης", "Βαγγέλης", "Βασίλης", "Γεώργιος", "Γιάννης", "Δημήτρης", "Εμμανουήλ",
                            "Ευάγγελος", "Θανάσης", "Θεόδωρος", "Ιωάννης", "Κωνσταντίνος", "Νίκος", "Παναγιώτης", "Πέτρος",
                            "Σταύρος", "Σωτήρης", "Τάσος"]

        if gender == "male":
            return random.choice(greek_male_names)
        elif gender == "female":
            return random.choice(greek_female_names)

        return None

    def generate_surname(self, gender):
        """Generates a random surname given the gender of the patient"""
        greek_male_surnames = ["Αγγελάκας", "Αθανασιάδης", "Αναστασιάδης", "Ανδριανόπουλος", "Αντωνίου", "Αποστολίδης",
                               "Βασιλειάδης", "Βασιλόπουλος", "Βλάχος", "Γαλανός", "Γεωργίου", "Γιαννακόπουλος", "Δαμιανούδης",
                               "Δημητρακόπουλος", "Δημητρόπουλος", "Δουβίκας", "Δρίτσας", "Ελευθεριάδης", "Ευαγγελάτος",
                               "Ευαγγέλου", "Ζαχαρίας", "Ζουρνατζής", "Ηλιόπουλος", "Θεοδοσίου", "Καλλιγάς", "Καλογερόπουλος",
                               "Καραγιάννης", "Καραγιωργάκης", "Καραθανάσης", "Μπουνταλάς", "Καραμήτρος", "Καραπιπέρης",
                               "Τσιμπουκλής" "Καραποτής", "Κατσανέβας", "Κολοκυθάς", "Κοντογιάννης", "Κορκίδης",
                               "Κοτσώνης", "Κουκουλιώτης", "Κουρκουλάς", "Κυριακίδης", "Λιάγκας", "Λιανός", "Λουκάκος",
                               "Λυκουρέζος", "Μαλλίδης", "Μανιάτης", "Μαυρίδης", "Μπαλαούρας", "Μπαξεβάνος", "Μπίσδας",
                               "Μπλέτσας", "Μποζικός", "Μπούκας", "Μπούντας", "Νικολαΐδης", "Ντούλης", "Ξυδούς",
                               "Παπαγεωργίου", "Παπαγιαννίδης", "Λιάγκας", "Λιάκος", "Λυκουρέζος", "Μακρής",
                               "Μαυρίδης", "Μπαλαούρας", "Μπαξεβάνος", "Μπόγρης", "Πιπόζης", "Νικολάου",
                               "Νικολούζος", "Ξανθόπουλος", "Οικονομίδης", "Οικονόμου", "Οικονομόπουλος",
                               "Ουράνης", "Παναγόπουλος", "Παναγιωτόπουλος", "Παπαγεωργίου",
                               "Παπαδόπουλος", "Παπαναστασίου", "Παπανδρέου", "Παπανικολάου",
                               "Παπαστεργίου", "Παρασκευάς", "Πατεράκης", "Περικλής", "Περιστέρης",
                               "Πετρίδης", "Πετροπουλόπουλος", "Πιπεράκης", "Πλατής", "Μαλακοπίτουρας",
                               "Πολυχρονόπουλος", "Πολυχρόνης", "Ρίζος", "Ραπτόπουλος", "Ρούσσος", "Σαρρής",
                               "Σαραντίδης", "Σιδερής", "Σιδηρόπουλος", "Σκουρτής", "Σπυρίδων", "Σταματίου",
                               "Σταυρόπουλος", "Στεφανάκης", "Στράτος", "Στυλιανού", "Σωτηρόπουλος",
                               "Ταμβάκης", "Τζαβέλλας", "Τζανακάκης", "Τζανετάκης", "Τζιμούρης",
                               "Τριανταφύλλου", "Τσάτσος", "Τσαγκαράκης", "Τσακίρης", "Τσιακίρης"]

        greek_female_surnames = ["Αλεξανδρή", "Χαζοβιόλα", "Ανδρεάδου", "Τσιμπουκλιάδου", "Ανδρούτσου", "Αντωνιάδου",
                                 "Βασιλειάδου", "Γεωργοπούλου", "Γρηγορίου", "Δημητρίου", "Διαμαντοπούλου", "Δραγώνα",
                                 "Θεοδωρίδου", "Καραγιάννη", "Καραμανλή", "Κατσούλη", "Κοντογιάννη",
                                 "Κουτσουκού", "Λιάγκα", "Λιάκου", "Λυκουρέζου", "Μαυρίδου", "Μπαλαούρα",
                                 "Μπάρκα", "Μπογρή", "Παντελίδου", "Παπαδάκη", "Παπαδόπουλου", "Παπανδρέου",
                                 "Παπανικολάου", "Παπασταύρου", "Παππά", "Πασπαρδάνη", "Πετρίδου", "Πετσίνη", "Πρωτόπαπα"]

        if gender == "male":
            return random.choice(greek_male_surnames)
        elif gender == "female":
            return random.choice(greek_female_surnames)

        return None


if __name__ == "__main__":
    patients_list = []
    for i in range(100):
        patients_list.append(RandomPatient())

    RandomPatient.write_many_to_database(patients_list)
